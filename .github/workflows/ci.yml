# https://docs.docker.com/docker-hub/builds/automated-testing

# https://github.com/actions/checkout
# https://github.com/docker/setup-qemu-action
# https://github.com/docker/setup-buildx-action
# https://github.com/docker/login-action
# https://github.com/docker/build-push-action/#multi-platform-image
# https://github.com/metcalfc/docker-action-examples


# name: GitHub default-branch ci
 
# Publish `$default-branch` as Docker `latest` image.
on:
  push:
    branches: 
      - skip-master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: debian-jsr
  # DOCKER_CLI_EXPERIMENTAL: enabled

jobs:
  multi:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Prepare
        id: prep
        run: |
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          DOCKER_IMAGE=ghcr.io/${{ github.repository_owner }}/${IMAGE_NAME}
          VERSION=edge
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          # if [ "${{ github.event_name }}" = "schedule" ]; then
          #   VERSION=nightly
          # fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest"
          fi
          echo ::set-output name=tags::${TAGS}

  #         # Change all uppercase to lowercase
  #         IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

  #         # Strip git ref prefix from version
  #         VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

  #         # Strip "v" prefix from tag name
  #         [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

  #         # Use Docker `latest` tag convention
  #         [ "$VERSION" == "$default-branch" ] && VERSION=latest

  #         echo IMAGE_ID=$IMAGE_ID
  #         echo VERSION=$VERSION

  #         docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
  #         docker push $IMAGE_ID:$VERSION

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1.1.0
        # defaults to with: platforms: all

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
          # username: ${{ secrets.DOCKERHUB_USERNAME }}
          # password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          # context: .
          # file: ./Dockerfile
          # platforms: linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x
          platforms: linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64
          push: true
          # push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          # tags: |
          #   scottrussom/app:latest
          #   scottrussom/app:1.0.0
          # # scottrussom/app:latest
          # # scottrussom/app:1.0.0
          # cache-from: type=registry,ref=scottrussom/app:latest
          # cache-to: type=inline

      - name: Inspect
        run: |
          docker image inspect myimage:latest


  # registry-cache:
  #   runs-on: ubuntu-latest
  #   steps:
  #     -
  #       name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1
  #     -
  #       name: Login to DockerHub
  #       uses: docker/login-action@v1 
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}
  #     -
  #       name: Build and push
  #       uses: docker/build-push-action@v2
  #       with:
  #         push: true
  #         tags: user/app:latest
  #         cache-from: type=registry,ref=user/app:latest
  #         cache-to: type=inline


  # test:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: checkout for test
  #       uses: actions/checkout@v2

  #     - name: Set up Docker Buildx for test
  #       uses: docker/setup-buildx-action@v1

  #     - name: Run tests
  #       run: |
  #         if [ -f docker-compose.test.yml ]; then
  #           docker-compose --file docker-compose.test.yml build
  #           docker-compose --file docker-compose.test.yml run sut
  #         else
  #           echo "************* JSR Test Begin *************"
  #           set -x
  #           echo "DOCKER_CLI_EXPERIMENTAL=$DOCKER_CLI_EXPERIMENTAL"
  #           arch
  #           whoami
  #           docker --version
  #           docker buildx version
  #           docker buildx ls
  #           # docker run --rm --privileged linuxkit/binfmt:v0.8
  #           # ls -al /proc/sys/fs/binfmt_misc/
  #           # cat /proc/sys/fs/binfmt_misc/qemu-aarch64
  #           # docker buildx create --use --name mybuilder
  #           # docker buildx ls
  #           set +x
  #           echo "Running docker buildx build . --file Dockerfile --platform linux/amd64,linux/arm/v7,linux/arm64"
  #           docker buildx build . --file Dockerfile --platform linux/amd64,linux/arm/v7,linux/arm64
  #           echo "************* JSR Test End *************"
  #         fi
  # # docker build . --file Dockerfile


  # # Push image to GitHub Packages.
  # # See also https://docs.docker.com/docker-hub/builds/
  # push:
  #   # Ensure test job passes before pushing image.
  #   needs: test

  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push'

  #   steps:
  #     - name: checkout for build
  #       uses: actions/checkout@v2

  #     - name: Set up Docker Buildx for build
  #       uses: docker/setup-buildx-action@v1

  #     - name: Build image
  #       run: docker buildx build . --file Dockerfile --tag $IMAGE_NAME --platform linux/amd64,linux/arm/v7,linux/arm64
  #       # run: docker build . --file Dockerfile --tag $IMAGE_NAME

  #     - name: Log into registry
  #       run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

  #     - name: Push image
  #       run: |
  #         # TODO: update to use ghcr.io #### IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

  #         # Change all uppercase to lowercase
  #         IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

  #         # Strip git ref prefix from version
  #         VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

  #         # Strip "v" prefix from tag name
  #         [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

  #         # Use Docker `latest` tag convention
  #         [ "$VERSION" == "$default-branch" ] && VERSION=latest

  #         echo IMAGE_ID=$IMAGE_ID
  #         echo VERSION=$VERSION

  #         docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
  #         docker push $IMAGE_ID:$VERSION
